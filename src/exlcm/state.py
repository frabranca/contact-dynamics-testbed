"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class state(object):
    __slots__ = ["q", "q_d", "dq", "dq_d", "ddq_d", "tau_J", "tau_J_d", "dtau_J", "width", "max_width", "is_grasped"]

    __typenames__ = ["double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "boolean"]

    __dimensions__ = [[7], [7], [7], [7], [7], [7], [7], [7], None, None, None]

    def __init__(self):
        self.q = [ 0.0 for dim0 in range(7) ]
        self.q_d = [ 0.0 for dim0 in range(7) ]
        self.dq = [ 0.0 for dim0 in range(7) ]
        self.dq_d = [ 0.0 for dim0 in range(7) ]
        self.ddq_d = [ 0.0 for dim0 in range(7) ]
        self.tau_J = [ 0.0 for dim0 in range(7) ]
        self.tau_J_d = [ 0.0 for dim0 in range(7) ]
        self.dtau_J = [ 0.0 for dim0 in range(7) ]
        self.width = 0.0
        self.max_width = 0.0
        self.is_grasped = False

    def encode(self):
        buf = BytesIO()
        buf.write(state._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>7d', *self.q[:7]))
        buf.write(struct.pack('>7d', *self.q_d[:7]))
        buf.write(struct.pack('>7d', *self.dq[:7]))
        buf.write(struct.pack('>7d', *self.dq_d[:7]))
        buf.write(struct.pack('>7d', *self.ddq_d[:7]))
        buf.write(struct.pack('>7d', *self.tau_J[:7]))
        buf.write(struct.pack('>7d', *self.tau_J_d[:7]))
        buf.write(struct.pack('>7d', *self.dtau_J[:7]))
        buf.write(struct.pack(">ddb", self.width, self.max_width, self.is_grasped))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != state._get_packed_fingerprint():
            raise ValueError("Decode error")
        return state._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = state()
        self.q = struct.unpack('>7d', buf.read(56))
        self.q_d = struct.unpack('>7d', buf.read(56))
        self.dq = struct.unpack('>7d', buf.read(56))
        self.dq_d = struct.unpack('>7d', buf.read(56))
        self.ddq_d = struct.unpack('>7d', buf.read(56))
        self.tau_J = struct.unpack('>7d', buf.read(56))
        self.tau_J_d = struct.unpack('>7d', buf.read(56))
        self.dtau_J = struct.unpack('>7d', buf.read(56))
        self.width, self.max_width = struct.unpack(">dd", buf.read(16))
        self.is_grasped = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if state in parents: return 0
        tmphash = (0x6dec2cc1fc14e4df) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if state._packed_fingerprint is None:
            state._packed_fingerprint = struct.pack(">Q", state._get_hash_recursive([]))
        return state._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

