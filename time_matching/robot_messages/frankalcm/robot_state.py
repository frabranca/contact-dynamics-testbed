"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class robot_state(object):
    __slots__ = ["q", "q_d", "dq", "dq_d", "ddq_d", "tau_J", "tau_J_d", "dtau_J", "robot_enable", "ext_force", "EFpose"]

    __typenames__ = ["double", "double", "double", "double", "double", "double", "double", "double", "boolean", "double", "double"]

    __dimensions__ = [[7], [7], [7], [7], [7], [7], [7], [7], None, [6], [3]]

    def __init__(self):
        self.q = [ 0.0 for dim0 in range(7) ]
        self.q_d = [ 0.0 for dim0 in range(7) ]
        self.dq = [ 0.0 for dim0 in range(7) ]
        self.dq_d = [ 0.0 for dim0 in range(7) ]
        self.ddq_d = [ 0.0 for dim0 in range(7) ]
        self.tau_J = [ 0.0 for dim0 in range(7) ]
        self.tau_J_d = [ 0.0 for dim0 in range(7) ]
        self.dtau_J = [ 0.0 for dim0 in range(7) ]
        self.robot_enable = False
        self.ext_force = [ 0.0 for dim0 in range(6) ]
        self.EFpose = [ 0.0 for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(robot_state._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>7d', *self.q[:7]))
        buf.write(struct.pack('>7d', *self.q_d[:7]))
        buf.write(struct.pack('>7d', *self.dq[:7]))
        buf.write(struct.pack('>7d', *self.dq_d[:7]))
        buf.write(struct.pack('>7d', *self.ddq_d[:7]))
        buf.write(struct.pack('>7d', *self.tau_J[:7]))
        buf.write(struct.pack('>7d', *self.tau_J_d[:7]))
        buf.write(struct.pack('>7d', *self.dtau_J[:7]))
        buf.write(struct.pack(">b", self.robot_enable))
        buf.write(struct.pack('>6d', *self.ext_force[:6]))
        buf.write(struct.pack('>3d', *self.EFpose[:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != robot_state._get_packed_fingerprint():
            raise ValueError("Decode error")
        return robot_state._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = robot_state()
        self.q = struct.unpack('>7d', buf.read(56))
        self.q_d = struct.unpack('>7d', buf.read(56))
        self.dq = struct.unpack('>7d', buf.read(56))
        self.dq_d = struct.unpack('>7d', buf.read(56))
        self.ddq_d = struct.unpack('>7d', buf.read(56))
        self.tau_J = struct.unpack('>7d', buf.read(56))
        self.tau_J_d = struct.unpack('>7d', buf.read(56))
        self.dtau_J = struct.unpack('>7d', buf.read(56))
        self.robot_enable = bool(struct.unpack('b', buf.read(1))[0])
        self.ext_force = struct.unpack('>6d', buf.read(48))
        self.EFpose = struct.unpack('>3d', buf.read(24))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if robot_state in parents: return 0
        tmphash = (0x9b6a1ff0579662f) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if robot_state._packed_fingerprint is None:
            robot_state._packed_fingerprint = struct.pack(">Q", robot_state._get_hash_recursive([]))
        return robot_state._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", robot_state._get_packed_fingerprint())[0]

